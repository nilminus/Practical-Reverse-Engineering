Execution state is ARM: All instruction are 32-bit
Function prologue Line 1: Stores register r4-r8 to the stack, SP = SP - 20 (5 registers)
Function epilogue Line 41: Restores registers r4-r8 from the stack, SP = SP + 20 (5 registers)

Function returns boolean: loc_B30C -> return 0;
                          loc_B33C -> return 1;

BOOL unk_function(char *str, int *result);



/* Line 3:
r3 = (byte) *str;
if (r3 == "-"){                // Looks like 1st parameter is ascii "-"
    r3 = (byte) (str + 1);     // 2nd character from str, r0 ++ (2nd character)
    r6 = 1;
} else {
    r6 = 0;
    if (r3 == "+")             // + 
        r3 = (byte) str + 1);  // Point to 2nd character
} /*

BOOL negatif;
if (*str == "-"){
    str++;                      // Point to 2nd character
    negatif = TRUE;             // Number is negative
} else {
    negatif = FALSE;            // Number is positive
    if (*str == "+"){
        str++;                  // If there is a plus sign, point to 2nd character
        
    }
}

/* Check if first number is zero.
Enter loop increasing str pointer while character is zero (0) */

while (*str == "0"){            // Eliminate leading zeroes (e.g. -0000032)
    str++;                      // str will point to start of actual number
}


/* 
i = 0                           // i = r12 = 0 Points to first character
r4 = 0
r5 = 0
r8 = 10         // "\n" ?

Suppose number = "+000135"
##### 1st pass #####
28: r7 = 1
29: r12 = 1
    // UMULL r2, r3, r4, r8            // Unsigned 64bit multiplication of two 32-bit registers
30: r3 = 0              (r3r2 = 0 * 10)
    r2 = 0
31: r7 = 1              (r7 = 31 - 30)
    // MLA r3 = (r8 * r5) + r3             // Rd := (Rn + (Rm * Rs))[31:0]
34: r3 = 0              (r3 = 10 * 0 + 0)
25: r4 = 1               (r4 = 0 + 1)
25: r5 = 0               (r5 = 0 + 0)

##### 2nd pass #####
28: r7 = 3
29: r12 = 2
30: r3 = 0              (r3r2 = 1 * 10)
    r2 = 10
31: r7 = 3              (r7 = 33 - 30)
34: r3 = 0              (r3 = 10 * 0 + 0)
25: r4 = 13               (r4 = 10 + 3)
25: r5 = 0               (r5 = 0 + 0)

##### 3rd pass #####
28: r7 = 5
29: r12 = 3
30: r3 = 0              (r3r2 = 13 * 10)
    r2 = 130
31: r7 = 5              (r7 = 35 - 30)
34: r3 = 0              (r3 = 10 * 0 + 0)
25: r4 = 135               (r4 = 130 + 5)
25: r5 = 0               (r5 = 0 + 0)

*/

int base = 10;
long result = 0;

while (str[index] >= '0' and str[index] <= '9'){
    result = result * 10 + str[index];
    index++ ;
    if (index == 12) return 0;
}

/* Line 44: Suppose number = -135
44: r2 = 135                (-135 - 1) : number - (is it negative?))
45: r3 = 0                    (r5 - r6>>31: 0 - 0)
47: r0 = 0                    (r0 = r3 - 0)
52: r4 = 136 */

if (abs(result) >= INT_MAX)
    return FALSE;

*retnum = result;
return TRUE;
